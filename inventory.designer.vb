'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="inventory1")>  _
Partial Public Class inventory
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertequipment(instance As equipment)
    End Sub
  Partial Private Sub Updateequipment(instance As equipment)
    End Sub
  Partial Private Sub Deleteequipment(instance As equipment)
    End Sub
  Partial Private Sub Insertclassroom(instance As classroom)
    End Sub
  Partial Private Sub Updateclassroom(instance As classroom)
    End Sub
  Partial Private Sub Deleteclassroom(instance As classroom)
    End Sub
  Partial Private Sub Insertprofessor(instance As professor)
    End Sub
  Partial Private Sub Updateprofessor(instance As professor)
    End Sub
  Partial Private Sub Deleteprofessor(instance As professor)
    End Sub
  Partial Private Sub Insertrecord(instance As record)
    End Sub
  Partial Private Sub Updaterecord(instance As record)
    End Sub
  Partial Private Sub Deleterecord(instance As record)
    End Sub
  Partial Private Sub Insertuserinventory(instance As userinventory)
    End Sub
  Partial Private Sub Updateuserinventory(instance As userinventory)
    End Sub
  Partial Private Sub Deleteuserinventory(instance As userinventory)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.WindowsApplication1.My.MySettings.Default.inventory1ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property equipments() As System.Data.Linq.Table(Of equipment)
		Get
			Return Me.GetTable(Of equipment)
		End Get
	End Property
	
	Public ReadOnly Property classrooms() As System.Data.Linq.Table(Of classroom)
		Get
			Return Me.GetTable(Of classroom)
		End Get
	End Property
	
	Public ReadOnly Property professors() As System.Data.Linq.Table(Of professor)
		Get
			Return Me.GetTable(Of professor)
		End Get
	End Property
	
	Public ReadOnly Property records() As System.Data.Linq.Table(Of record)
		Get
			Return Me.GetTable(Of record)
		End Get
	End Property
	
	Public ReadOnly Property userinventories() As System.Data.Linq.Table(Of userinventory)
		Get
			Return Me.GetTable(Of userinventory)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.equipment")>  _
Partial Public Class equipment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _tag As String
	
	Private _name As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntagChanging(value As String)
    End Sub
    Partial Private Sub OntagChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tag() As String
		Get
			Return Me._tag
		End Get
		Set
			If (String.Equals(Me._tag, value) = false) Then
				Me.OntagChanging(value)
				Me.SendPropertyChanging
				Me._tag = value
				Me.SendPropertyChanged("tag")
				Me.OntagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.classroom")>  _
Partial Public Class classroom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _tag As String
	
	Private _description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntagChanging(value As String)
    End Sub
    Partial Private Sub OntagChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tag() As String
		Get
			Return Me._tag
		End Get
		Set
			If (String.Equals(Me._tag, value) = false) Then
				Me.OntagChanging(value)
				Me.SendPropertyChanging
				Me._tag = value
				Me.SendPropertyChanged("tag")
				Me.OntagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.professor")>  _
Partial Public Class professor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _firstName As String
	
	Private _lastName As String
	
	Private _department As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnfirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnfirstNameChanged()
    End Sub
    Partial Private Sub OnlastNameChanging(value As String)
    End Sub
    Partial Private Sub OnlastNameChanged()
    End Sub
    Partial Private Sub OndepartmentChanging(value As String)
    End Sub
    Partial Private Sub OndepartmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me.OnfirstNameChanging(value)
				Me.SendPropertyChanging
				Me._firstName = value
				Me.SendPropertyChanged("firstName")
				Me.OnfirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property lastName() As String
		Get
			Return Me._lastName
		End Get
		Set
			If (String.Equals(Me._lastName, value) = false) Then
				Me.OnlastNameChanging(value)
				Me.SendPropertyChanging
				Me._lastName = value
				Me.SendPropertyChanged("lastName")
				Me.OnlastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_department", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property department() As String
		Get
			Return Me._department
		End Get
		Set
			If (String.Equals(Me._department, value) = false) Then
				Me.OndepartmentChanging(value)
				Me.SendPropertyChanging
				Me._department = value
				Me.SendPropertyChanged("department")
				Me.OndepartmentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.records")>  _
Partial Public Class record
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _professorName As String
	
	Private _equipmentTag As String
	
	Private _classroomTag As String
	
	Private _comment As String
	
	Private _AllocatedTimestamp As String
	
	Private _returned As Boolean
	
	Private _returnedTimestamp As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnprofessorNameChanging(value As String)
    End Sub
    Partial Private Sub OnprofessorNameChanged()
    End Sub
    Partial Private Sub OnequipmentTagChanging(value As String)
    End Sub
    Partial Private Sub OnequipmentTagChanged()
    End Sub
    Partial Private Sub OnclassroomTagChanging(value As String)
    End Sub
    Partial Private Sub OnclassroomTagChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OnAllocatedTimestampChanging(value As String)
    End Sub
    Partial Private Sub OnAllocatedTimestampChanged()
    End Sub
    Partial Private Sub OnreturnedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnreturnedChanged()
    End Sub
    Partial Private Sub OnreturnedTimestampChanging(value As String)
    End Sub
    Partial Private Sub OnreturnedTimestampChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_professorName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property professorName() As String
		Get
			Return Me._professorName
		End Get
		Set
			If (String.Equals(Me._professorName, value) = false) Then
				Me.OnprofessorNameChanging(value)
				Me.SendPropertyChanging
				Me._professorName = value
				Me.SendPropertyChanged("professorName")
				Me.OnprofessorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipmentTag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property equipmentTag() As String
		Get
			Return Me._equipmentTag
		End Get
		Set
			If (String.Equals(Me._equipmentTag, value) = false) Then
				Me.OnequipmentTagChanging(value)
				Me.SendPropertyChanging
				Me._equipmentTag = value
				Me.SendPropertyChanged("equipmentTag")
				Me.OnequipmentTagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_classroomTag", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property classroomTag() As String
		Get
			Return Me._classroomTag
		End Get
		Set
			If (String.Equals(Me._classroomTag, value) = false) Then
				Me.OnclassroomTagChanging(value)
				Me.SendPropertyChanging
				Me._classroomTag = value
				Me.SendPropertyChanged("classroomTag")
				Me.OnclassroomTagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="VarChar(200)")>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllocatedTimestamp", DbType:="VarChar(50)")>  _
	Public Property AllocatedTimestamp() As String
		Get
			Return Me._AllocatedTimestamp
		End Get
		Set
			If (String.Equals(Me._AllocatedTimestamp, value) = false) Then
				Me.OnAllocatedTimestampChanging(value)
				Me.SendPropertyChanging
				Me._AllocatedTimestamp = value
				Me.SendPropertyChanged("AllocatedTimestamp")
				Me.OnAllocatedTimestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returned", DbType:="Bit NOT NULL")>  _
	Public Property returned() As Boolean
		Get
			Return Me._returned
		End Get
		Set
			If ((Me._returned = value)  _
						= false) Then
				Me.OnreturnedChanging(value)
				Me.SendPropertyChanging
				Me._returned = value
				Me.SendPropertyChanged("returned")
				Me.OnreturnedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_returnedTimestamp", DbType:="VarChar(50)")>  _
	Public Property returnedTimestamp() As String
		Get
			Return Me._returnedTimestamp
		End Get
		Set
			If (String.Equals(Me._returnedTimestamp, value) = false) Then
				Me.OnreturnedTimestampChanging(value)
				Me.SendPropertyChanging
				Me._returnedTimestamp = value
				Me.SendPropertyChanged("returnedTimestamp")
				Me.OnreturnedTimestampChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.userinventory")>  _
Partial Public Class userinventory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _fullname As String
	
	Private _firstName As String
	
	Private _username As String
	
	Private _password As String
	
	Private _userType As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnfullnameChanging(value As String)
    End Sub
    Partial Private Sub OnfullnameChanged()
    End Sub
    Partial Private Sub OnfirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnfirstNameChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnuserTypeChanging(value As String)
    End Sub
    Partial Private Sub OnuserTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fullname", DbType:="VarChar(50)")>  _
	Public Property fullname() As String
		Get
			Return Me._fullname
		End Get
		Set
			If (String.Equals(Me._fullname, value) = false) Then
				Me.OnfullnameChanging(value)
				Me.SendPropertyChanging
				Me._fullname = value
				Me.SendPropertyChanged("fullname")
				Me.OnfullnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_firstName", DbType:="VarChar(50)")>  _
	Public Property firstName() As String
		Get
			Return Me._firstName
		End Get
		Set
			If (String.Equals(Me._firstName, value) = false) Then
				Me.OnfirstNameChanging(value)
				Me.SendPropertyChanging
				Me._firstName = value
				Me.SendPropertyChanged("firstName")
				Me.OnfirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userType", DbType:="VarChar(50)")>  _
	Public Property userType() As String
		Get
			Return Me._userType
		End Get
		Set
			If (String.Equals(Me._userType, value) = false) Then
				Me.OnuserTypeChanging(value)
				Me.SendPropertyChanging
				Me._userType = value
				Me.SendPropertyChanged("userType")
				Me.OnuserTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
